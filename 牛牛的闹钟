牛牛总是睡过头，所以他定了很多闹钟，只有在闹钟响的时候他才会醒过来并且决定起不起床。从他起床算起他需要X分钟到达教室，上课时间为当天的A时B分，请问他最晚可以什么时间起床 
输入描述:
每个输入包含一个测试用例。
每个测试用例的第一行包含一个正整数，表示闹钟的数量N(N<=100)。
接下来的N行每行包含两个整数，表示这个闹钟响起的时间为Hi(0<=A<24)时Mi(0<=B<60)分。
接下来的一行包含一个整数，表示从起床算起他需要X(0<=X<=100)分钟到达教室。
接下来的一行包含两个整数，表示上课时间为A(0<=A<24)时B(0<=B<60)分。
数据保证至少有一个闹钟可以让牛牛及时到达教室。

输出描述:
输出两个整数表示牛牛最晚起床时间。
示例1
输入
3 
5 0 
6 0 
7 0 
59 
6 59
输出
6 0

#include <iostream>
using namespace std;
int main()
{
	int n;
	int max_h = 0, max_m=0, max_t=0;
	cin >> n;
	//定的闹钟
	int *hour = new int[n];
	int *minute = new int[n];
	int *time = new int[n];
	for (int i = 0; i < n;i++)
	{
		cin >> hour[i] >> minute[i];
		time[i] = hour[i] * 60 + minute[i];//转化成分钟
	}
	int NeedTime; //需要多长时间到达学校
	cin >> NeedTime;
	int R_h, R_m, R_t;//上课时间
	cin >> R_h >> R_m;
	R_t = R_h * 60 + R_m;//转化成分钟
	for (int i = 0; i < n; i++)
	{
		if (time[i]>max_t && R_t>=time[i]+NeedTime)
		{
			max_h = hour[i];
			max_m = minute[i];
			max_t = time[i];
		}
	}
	cout << max_h << " " << max_m;
	//system("pause");
	return 0;
}
